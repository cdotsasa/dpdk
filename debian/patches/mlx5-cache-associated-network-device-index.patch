---
 drivers/net/mlx5/mlx5.c        |   10 +++++++++
 drivers/net/mlx5/mlx5.h        |    1 
 drivers/net/mlx5/mlx5_ethdev.c |   43 +++++++++++++++++++++++++++++++++++++----
 3 files changed, 50 insertions(+), 4 deletions(-)

--- a/drivers/net/mlx5/mlx5.c
+++ b/drivers/net/mlx5/mlx5.c
@@ -1131,6 +1131,16 @@
 		eth_dev->data->representor_id = priv->representor_id;
 	}
 	eth_dev->data->dev_private = priv;
+	/*
+	 * Store associated network device interface index. This index
+	 * is permanent throughout the lifetime of device. So, we may store
+	 * the ifindex here and use the cached value further.
+	 */
+	priv->if_index = mlx5_ifindex(eth_dev);
+	if (err) {
+		err = rte_errno;
+		goto error;
+	}
 	priv->dev_data = eth_dev->data;
 	eth_dev->data->mac_addrs = priv->mac;
 	eth_dev->device = dpdk_dev;
--- a/drivers/net/mlx5/mlx5.h
+++ b/drivers/net/mlx5/mlx5.h
@@ -192,6 +192,7 @@
 	unsigned int representor:1; /* Device is a port representor. */
 	uint16_t domain_id; /* Switch domain identifier. */
 	int32_t representor_id; /* Port representor identifier. */
+	unsigned int if_index; /* Associated kernel network device index. */
 	/* RX/TX queues. */
 	unsigned int rxqs_n; /* RX queues array size. */
 	unsigned int txqs_n; /* TX queues array size. */
--- a/drivers/net/mlx5/mlx5_ethdev.c
+++ b/drivers/net/mlx5/mlx5_ethdev.c
@@ -204,7 +204,7 @@
 }
 
 /**
- * Get interface name from private structure.
+ * Get interface name from private structure using the Netlink socket.
  *
  * This is a port representor-aware version of mlx5_get_master_ifname().
  *
@@ -216,8 +216,8 @@
  * @return
  *   0 on success, a negative errno value otherwise and rte_errno is set.
  */
-int
-mlx5_get_ifname(const struct rte_eth_dev *dev, char (*ifname)[IF_NAMESIZE])
+static int
+mlx5_nl_get_ifname(const struct rte_eth_dev *dev, char (*ifname)[IF_NAMESIZE])
 {
 	struct mlx5_priv *priv = dev->data->dev_private;
 	unsigned int ifindex =
@@ -237,6 +237,36 @@
 }
 
 /**
+ * Get interface name from private structure.
+ *
+ * This is a port representor-aware version of mlx5_get_master_ifname().
+ *
+ * @param[in] dev
+ *   Pointer to Ethernet device.
+ * @param[out] ifname
+ *   Interface name output buffer.
+ *
+ * @return
+ *   0 on success, a negative errno value otherwise and rte_errno is set.
+ */
+int
+mlx5_get_ifname(const struct rte_eth_dev *dev, char (*ifname)[IF_NAMESIZE])
+{
+	struct mlx5_priv *priv = dev->data->dev_private;
+	unsigned int ifindex;
+
+	ifindex = mlx5_ifindex(dev);
+	if (!ifindex) {
+		rte_errno = ENXIO;
+		return -rte_errno;
+	}
+	if (if_indextoname(ifindex, &(*ifname)[0]))
+		return 0;
+	rte_errno = errno;
+	return -rte_errno;
+}
+
+/**
  * Get the interface index from device name.
  *
  * @param[in] dev
@@ -248,10 +278,15 @@
 unsigned int
 mlx5_ifindex(const struct rte_eth_dev *dev)
 {
+	struct mlx5_priv *priv = dev->data->dev_private;
 	char ifname[IF_NAMESIZE];
 	unsigned int ifindex;
 
-	if (mlx5_get_ifname(dev, &ifname))
+	assert(priv);
+	ifindex = priv->if_index;
+	if (ifindex)
+		return ifindex;
+	if (mlx5_nl_get_ifname(dev, &ifname))
 		return 0;
 	ifindex = if_nametoindex(ifname);
 	if (!ifindex)
